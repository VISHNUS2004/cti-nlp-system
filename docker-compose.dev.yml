version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cti-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cti_nlp
      POSTGRES_USER: cti_user
      POSTGRES_PASSWORD: cti_password123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cti-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cti_user -d cti_nlp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: cti-redis
    restart: unless-stopped
    command: redis-server --requirepass redis_password123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cti-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cti-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cti_user:cti_password123@postgres:5432/cti_nlp
      - REDIS_URL=redis://:redis_password123@redis:6379/0
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - ENVIRONMENT=production
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cti-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: cti-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - cti-network

volumes:
  postgres_data:
  redis_data:

networks:
  cti-network:
    driver: bridge
